//
//  Resource.swift
//  Spine
//
//  Created by Ward van Teijlingen on 21-08-14.
//  Copyright (c) 2014 Ward van Teijlingen. All rights reserved.
//

import Foundation

public typealias Metadata = [String: Any]
public typealias JSONAPIData = [String: Any]

/// The main class
open class Spine {

	/// The serializer to use for serializing and deserializing of JSON representations.
	public let serializer: Serializer = Serializer()

	/// The key formatter to use for formatting field names to keys.
	public var keyFormatter: KeyFormatter = DasherizedKeyFormatter() {
		didSet {
			serializer.keyFormatter = keyFormatter
		}
	}
	
	/// ID generator that generates client side IDs. If this is nil, IDs will not be
	/// generated by Spine.
	public var idGenerator: ((Resource) -> String)?

	// MARK: Initializers

	/// Creates a new Spine instance using the given router and network client.
	/// Use this initializer if you want to use a custom router and network client.
	///
	/// - parameter router:        The Router to use.
	/// - parameter networkClient: The NetworkClient to use
	///
	/// - returns: The Spine instance.
	public init() {
		self.serializer.keyFormatter = keyFormatter
	}
}

public extension Spine {
	/// Registers a resource class.
	///
	/// - parameter resourceClass: The resource class to register.
	func registerResource(_ resourceClass: Resource.Type) {
		serializer.registerResource(resourceClass)
	}

	/// Registers a value formatter.
	///
	/// - parameter formatter: The formatter to register.
	func registerValueFormatter<T: ValueFormatter>(_ formatter: T) {
		serializer.registerValueFormatter(formatter)
	}
}


/// Represents the result of a failable operation.
///
/// - success: The operation succeeded with the given result.
/// - failure: The operation failed with the given error.
enum Failable<T, E: Error> {
	case success(T)
	case failure(E)

	init(_ value: T) {
		self = .success(value)
	}

	init(_ error: E) {
		self = .failure(error)
	}

	var error: E? {
		switch self {
		case .failure(let error):
			return error
		default:
			return nil
		}
	}
}
